import os
import time
import ollama
from github import Github
from github import Auth
from dotenv import dotenv_values

config = dotenv_values(".env")
auth = Auth.Token(config["ACCESS_TOKEN"])
SKIP_WORD = "#not bot"
BANNER = """\
<details>
<summary>
By reading this comment, you agree to the following disclaimer ( expand this line to read )
</summary>

**All content generated by the service is generated by artificial intelligence models, the accuracy and completeness of the generated content cannot be guaranteed and does not represent the attitude or views of the account holder.**

</details>

---

"""
BANNER_LENGTH = len(BANNER.splitlines())
github = Github(auth=auth)
current_user = github.get_user()
print(f"Login as {current_user.name} <{current_user.email}> | {current_user.id}")
# repo = Github(base_url='https://github.com/api/v3',auth=auth)
# for repo in github.get_user().get_repos():
repo = github.get_repo(config["REPO_NAME"])


def generate_response(message_list: list):
    model_identifier = f"{config['LLM_MODEL_NAME']}:{config['LLM_MODEL_TAG']}"
    return ollama.chat(
        model=model_identifier,
        messages=message_list,
    )


def get_message(comment):
    if comment.body.splitlines()[0] == SKIP_WORD:
        return "user", comment.body.split("\n", 1)[1]
    elif comment.body.split("\n", 1)[0] == BANNER.split("\n")[0]:
        return (
            "assistant",
            comment.body.split("\n", BANNER_LENGTH - 1)[BANNER_LENGTH - 1],
        )
    else:
        return (
            "assistant" if comment.user.id == current_user.id else "user"
        ), comment.body


def get_clean_comment_content(comment):
    role = comment.body.split("\n", BANNER_LENGTH - 1)[BANNER_LENGTH - 1]


def search_new_comments():
    discussions = repo.get_issues(state="open")
    issue_cache = {}
    for page in range(discussions.totalCount):
        for issue in discussions.get_page(page):
            if issue.comments == 0:
                print(f"no message on issue {repo.name}-#{issue.number}-{issue.title}")
                continue
            if (
                issue.number in issue_cache
                and issue_cache[issue.number] == issue.updated_at
            ):
                print(
                    f"no new message on issue {repo.name}-#{issue.number}-{issue.title}"
                )
                continue
            comment_list = []
            for comment in issue.get_comments():
                message = get_message(comment)
                comment_list.append({"role": message[0], "content": message[1]})
            if comment_list[-1]["role"] == "assistant":
                issue_cache[issue.number] = issue.updated_at
                print(
                    f"issue already answered {repo.name}-#{issue.number}-{issue.title}"
                )
                continue
            response = generate_response(comment_list)
            result = issue.create_comment(BANNER + response["message"]["content"])
            print(f"issue new response {repo.name}-{issue.id}-{issue.title}")


if __name__ == "__main__":
    # pass
    while True:
        search_new_comments()
        time.sleep(10)
